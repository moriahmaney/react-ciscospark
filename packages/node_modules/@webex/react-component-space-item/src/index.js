import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';

import {ICONS} from '@ciscospark/react-component-icon';
import Button from '@ciscospark/react-component-button';
import JoinCallButton from '@ciscospark/react-component-join-call-button';

import {Avatar} from '@collab-ui/react';

import styles from './styles.scss';

const propTypes = {
  active: PropTypes.bool,
  activityText: PropTypes.oneOfType([
    PropTypes.string,
    PropTypes.element
  ]),
  callStartTime: PropTypes.number,
  hasCalling: PropTypes.bool,
  id: PropTypes.string,
  isDecrypting: PropTypes.bool,
  isUnread: PropTypes.bool,
  lastActivityTime: PropTypes.string,
  name: PropTypes.string,
  onCallClick: PropTypes.func,
  onClick: PropTypes.func,
  teamColor: PropTypes.string,
  teamName: PropTypes.string,
  type: PropTypes.string
};

const defaultProps = {
  active: false,
  activityText: '',
  callStartTime: undefined,
  hasCalling: false,
  id: '',
  isDecrypting: false,
  isUnread: false,
  lastActivityTime: '',
  name: '',
  onCallClick: () => {},
  onClick: () => {},
  teamColor: '',
  teamName: '',
  type: ''
};

function SpaceItem({
  active,
  activityText,
  callStartTime,
  hasCalling,
  id,
  isUnread,
  lastActivityTime,
  name,
  onClick,
  onCallClick,
  teamName,
  teamColor,
  type,
  isDecrypting
}) {
  function handleClick() {
    return onClick(id);
  }

  function handleKeyDown(e) {
    // If there is a keypress is Enter key
    if (e.keyCode && e.keyCode === 13) {
      return onClick(id);
    }
    return false;
  }


  function handleCallClick(e) {
    if (type === 'direct' || hasCalling) {
      e.stopPropagation();
      return onCallClick(id);
    }
    return false;
  }

  // Show hover call and join in progress buttons
  const hasCallSupport = hasCalling && typeof onCallClick === 'function';

  return (
    <div
      className={classNames('space-item', styles.item, {
        [styles.hasCallSupport]: !!hasCallSupport,
        [styles.isDecrypting]: !!isDecrypting,
        [styles.active]: !!active
      })}
      onKeyDown={handleKeyDown}
      onMouseDown={handleClick}
      role="button"
      tabIndex="0"
    >
      {
        isUnread &&
        <div className={classNames('space-unread-indicator', styles.unreadIndicator)} />
      }
      <div className={classNames('space-avatar-wrapper', styles.avatarWrapper)}>
        <div className={classNames('space-avatar-border', type === 'group' && styles.avatarGroup)}>
          <Avatar title={name} />
        </div>
      </div>
      <div className={classNames('space-item-meta', styles.meta)}>
        {
          teamName &&
          <div
            className={classNames('space-team-name', styles.teamName)}
            style={active ? {color: '#f5f5f5'} : teamColor && {color: teamColor}}
          >
            {teamName}
          </div>
        }
        <div className={classNames('space-title', styles.title, isUnread ? styles.isUnread : '')}>
          {name}
        </div>
        <div className={classNames('space-last-activity', styles.lastActivity)}>
          {activityText}
        </div>
      </div>
      {
        (!hasCallSupport || !callStartTime) &&
        <div className={classNames('space-last-activity-time', styles.timestamp)}>
          {lastActivityTime}
        </div>
      }
      {
        // Join call in progress
        hasCallSupport && callStartTime &&
        <div className={classNames('space-join-call', styles.joinCall)}>
          <JoinCallButton callStartTime={callStartTime} onJoinClick={handleCallClick} />
        </div>
      }
      {
        // Hover display of "call" button
        hasCallSupport && !callStartTime &&
        <div className={classNames('space-actions', styles.actions, styles.hoverReveal)}>
          <Button
            accessibilityLabel="Call Space"
            buttonClassName={classNames(styles.actionButton, styles.callButton)}
            iconType={ICONS.ICON_TYPE_VIDEO_OUTLINE}
            onClick={handleCallClick}
          />
        </div>
      }
    </div>
  );
}

SpaceItem.propTypes = propTypes;
SpaceItem.defaultProps = defaultProps;

export default SpaceItem;
