import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import {AutoSizer, List} from 'react-virtualized';

import Spinner from '@ciscospark/react-component-spinner';

import SpaceItem from '@webex/react-component-space-item';


const propTypes = {
  activeSpaceId: PropTypes.string,
  hasCalling: PropTypes.bool,
  isLoadingMore: PropTypes.bool,
  onCallClick: PropTypes.func,
  onClick: PropTypes.func,
  spaces: PropTypes.arrayOf(
    PropTypes.shape({
      avatarUrl: PropTypes.string,
      activityText: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.element
      ]),
      callStartTime: PropTypes.number,
      id: PropTypes.string,
      isDecrypting: PropTypes.bool,
      isUnread: PropTypes.bool,
      lastActivityTime: PropTypes.string,
      name: PropTypes.string,
      teamColor: PropTypes.string,
      teamName: PropTypes.string,
      type: PropTypes.string
    })
  )
};

const defaultProps = {
  activeSpaceId: '',
  hasCalling: false,
  isLoadingMore: false,
  onCallClick: () => {},
  onClick: () => {},
  spaces: []
};

export default function SpacesList({
  activeSpaceId,
  hasCalling,
  isLoadingMore,
  onCallClick,
  onClick,
  spaces
}) {
  function rowRenderer(options) {
    const {
      key,
      index,
      style
    } = options;
    if (index >= spaces.length) {
      return (
        <div key={key} style={style}>
          <Spinner bright />
        </div>
      );
    }
    const space = spaces[index];

    return (
      <div className={classNames(`ciscospark-spaces-list-item-${index}`)} key={key} style={style}>
        <SpaceItem
          active={space.id === activeSpaceId}
          hasCalling={hasCalling}
          key={key}
          onCallClick={onCallClick}
          onClick={onClick}
          {...space}
        />
      </div>
    );
  }

  const rowCount = isLoadingMore ? spaces.length + 1 : spaces.length;

  return (
    <div style={{height: '100%', width: '100%'}}>
      <AutoSizer>
        {({height, width}) => (
          <List
            className="ciscospark-spaces-list"
            height={height}
            rowCount={rowCount}
            rowHeight={70}
            rowRenderer={rowRenderer}
            width={width}
          />
        )}
      </AutoSizer>
    </div>
  );
}

SpacesList.propTypes = propTypes;
SpacesList.defaultProps = defaultProps;
