import React, {Component} from 'react';
import classNames from 'classnames';
import {Cookies, withCookies} from 'react-cookie';
import {instanceOf} from 'prop-types';
import {autobind} from 'core-decorators';

import {Button, Topbar} from '@collab-ui/react';

import SpaceWidget, {eventNames as spaceEvents} from '@ciscospark/widget-space';
import RecentsWidget from '@ciscospark/widget-recents';

import TokenInput from '@webex/private-react-component-token-input';
import SpaceDestination, {constants as destinationConstants} from '@webex/private-react-component-space-destination';
import ExampleCode from '@webex/private-react-component-example-code';

import ExternalControl from './external-control';

import './collab.scss';
import styles from './styles.css';

const {
  MODE_ONE_ON_ONE,
  MODE_ONE_ON_ONE_ID,
  MODE_SPACE,
  MODE_SIP,
  MODE_PSTN
} = destinationConstants;

const spaceWidgetElementId = 'my-ciscospark-space-widget';
const recentsWidgetElementId = 'my-ciscospark-recents-widget';

class DemoWidget extends Component {
  constructor(props) {
    super(props);
    const {cookies} = this.props;
    const mode = cookies.get('destinationMode') || MODE_SPACE;
    const destinationId = cookies.get('destinationId') || '';
    const isMeetOnly = [MODE_SIP, MODE_PSTN].includes(mode);
    const activities = cookies.get('activities') || {
      files: true,
      meet: true,
      message: true,
      people: true
    };
    const composerActions = cookies.get('activities') || {
      attachFiles: true
    };
    this.state = {
      activities: {
        files: isMeetOnly ? false : activities.files,
        meet: activities.meet,
        message: isMeetOnly ? false : activities.message,
        people: activities.people
      },
      accessToken: cookies.get('accessToken') || '',
      accessTokenType: cookies.get('accessTokenType') || '',
      composerActions,
      destinationId,
      initialActivity: isMeetOnly ? 'meet' : cookies.get('initialActivity') || 'message',
      mode,
      recentsRunning: false,
      recentsWidgetProps: {},
      setCurrentActivity: '',
      spaceRunning: false,
      spaceWidgetProps: {},
      stickyMode: false
    };
  }

  shouldComponentUpdate() {
    return true;
  }

  @autobind
  handleOpenSpaceWidget(e) {
    e.preventDefault();
    const {cookies} = this.props;
    cookies.set('accessToken', this.state.accessToken);
    cookies.set('accessTokenType', this.state.accessTokenType);
    cookies.set('activities', this.state.activities);
    cookies.set('destinationId', this.state.destinationId);
    cookies.set('destinationMode', this.state.mode);
    cookies.set('initialActivity', this.state.initialActivity);

    const toPerson = this.state.mode === MODE_ONE_ON_ONE ? this.state.destinationId : '';
    const toPersonId = this.state.mode === MODE_ONE_ON_ONE_ID ? this.state.destinationId : '';
    const toSpace = this.state.mode === MODE_SPACE ? this.state.destinationId : '';
    this.openSpaceWidget({
      toPerson,
      toPersonId,
      toSpace,
      destinationId: this.state.destinationId,
      destinationType: this.state.mode
    });
  }

  @autobind
  handleOpenRecentsWidget(e) {
    e.preventDefault();
    const {cookies} = this.props;
    cookies.set('accessToken', this.state.accessToken);
    cookies.set('accessTokenType', this.state.accessTokenType);
    const widgetOptions = {
      onEvent: (eventName, detail) => {
        window.ciscoSparkEvents.push({eventName, detail});
        if (eventName === 'rooms:selected') {
          const spaceId = detail.id;
          if (this.state.spaceRunning) {
            this.handleRemove();
          }
          this.openSpaceWidget({
            destinationType: 'spaceId',
            destinationId: spaceId,
            toSpace: spaceId
          });
        }
      }
    };
    if (this.state.accessTokenType === 'JWT') {
      widgetOptions.guestToken = this.state.accessToken;
    }
    else {
      widgetOptions.accessToken = this.state.accessToken;
    }
    this.setState({recentsRunning: true, recentsWidgetProps: widgetOptions});
  }

  @autobind
  handleRemove() {
    this.setState({spaceRunning: false});
  }

  @autobind
  handleRecentsRemove() {
    this.setState({recentsRunning: false});
  }

  @autobind
  handleAccessTokenChange(accessToken, accessTokenType) {
    return this.setState({accessToken, accessTokenType});
  }

  @autobind
  handleModeChange(value) {
    const newState = {destinationId: ''};
    newState.activities = this.state.activities;
    if ([MODE_SIP, MODE_PSTN].includes(value)) {
      newState.initialActivity = 'meet';
      newState.activities.files = false;
      newState.activities.message = false;
    }
    newState.mode = value;
    return this.setState(newState);
  }

  @autobind
  handleActivitiesChange(event) {
    const {value, checked} = event.target;
    const {activities} = this.state;
    activities[value] = checked;
    return this.setState({activities});
  }

  @autobind
  handleComposerActionsChange(event) {
    const {value, checked} = event.target;
    const {composerActions} = this.state;
    composerActions[value] = checked;
    return this.setState({composerActions});
  }

  @autobind
  handleDestinationChange(e) {
    return this.setState({destinationId: e.target.value});
  }

  @autobind
  handleInitialActivityChange(value) {
    return this.setState({initialActivity: value});
  }

  @autobind
  handleChangeActivity(value) {
    return this.setState({setCurrentActivity: value});
  }

  @autobind
  handleToggleStickyMode() {
    this.setState((state) => (
      {stickyMode: !state.stickyMode}
    ));
  }

  @autobind
  openSpaceWidget({
    destinationId, destinationType
  }) {
    const widgetOptions = {
      composerActions: this.state.composerActions,
      initialActivity: this.state.initialActivity,
      onEvent: (eventName, detail) => {
        window.ciscoSparkEvents.push({eventName, detail});
        if (eventName === spaceEvents.ACTIVITY_CHANGED) {
          this.setState({setCurrentActivity: ''});
        }
      },
      spaceActivities: this.state.activities
    };
    if (this.state.accessTokenType === 'JWT') {
      widgetOptions.guestToken = this.state.accessToken;
    }
    else {
      widgetOptions.accessToken = this.state.accessToken;
    }

    widgetOptions.destinationId = destinationId;
    widgetOptions.destinationType = destinationType;

    // External Control Props
    widgetOptions.setCurrentActivity = this.state.setCurrentActivity;

    this.setState({spaceRunning: true, spaceWidgetProps: widgetOptions});
  }

  generateExampleCode() {
    const {
      accessTokenType, activities, destinationId, mode
    } = this.state;

    const tokenString = accessTokenType === 'JWT' ? "guestToken: 'XXXXXXXXXXXXXX'" : "accessToken: 'XXXXXXXXXXXXXX'";

    // Recents widget example code
    const recentsCode = `<div id="my-ciscospark-widget" />
<script>
  var widgetEl = document.getElementById('my-ciscospark-widget');
  // Init a new widget
  ciscospark.widget(widgetEl).recentsWidget({
    ${tokenString}
  });
</script>`;

    // Space widget example code
    const activityTypesField = `activities: ${JSON.stringify(activities)}`;
    const destinationPlaceholder = `YOUR_DESTINATION_${this.state.mode.toUpperCase()}`;
    const destinationIdField = `destinationId: '${destinationId || destinationPlaceholder}'`;
    const destinationTypeField = `destinationType: '${mode}'`;
    const initialActivityField = `initialActivity: '${this.state.initialActivity}'`;

    const spaceCode = `<div id="my-ciscospark-widget" />
<script>
  var widgetEl = document.getElementById('my-ciscospark-widget');
  // Init a new widget
  ciscospark.widget(widgetEl).spaceWidget({
    ${tokenString}
    ${destinationIdField},
    ${destinationTypeField},
    ${activityTypesField},
    ${initialActivityField}
  });
</script>`;

    return {recentsCode, spaceCode};
  }

  render() {
    const {recentsCode, spaceCode} = this.generateExampleCode();
    const loadButtonEnabled = this.state.accessToken && this.state.destinationId;
    const loadRecentsButtonEnabled = this.state.accessToken && !this.state.recentsRunning;
    const componentSpaceContainerClassNames = [
      styles.widgetSpaceComponentContainer
    ];
    if (!this.state.spaceRunning) {
      componentSpaceContainerClassNames.push(styles.hidden);
    }
    const componentRecentsContainerClassNames = [
      styles.widgetRecentsComponentContainer
    ];
    if (!this.state.recentsRunning) {
      componentRecentsContainerClassNames.push(styles.hidden);
    }
    const runningDemosContainerClassNames = [
      this.state.stickyMode ? styles.runningDemosSticky : styles.runningDemosBottom
    ];
    if (!this.state.spaceRunning && !this.state.recentsRunning) {
      runningDemosContainerClassNames.push(styles.hidden);
    }

    // eslint-disable-reason should not apply to jsx/html markup
    /* eslint-disable max-len */
    return (
      <div>
        <Topbar title="Webex Teams Widgets Demo" />
        <div>
          <div className={styles.section}>
            <div>
              <h1>Webex Teams Widgets Demo</h1>
              <p>The Webex Teams widgets allow developers to easily incorporate Webex Teams Widgets into an application.</p>
              <p>Our widgets are built using <a href="https://github.com/facebook/react">React</a>, <a href="https://github.com/reactjs/redux">Redux</a>, and the <a href="https://github.com/webex/spark-js-sdk">Webex Teams Javascript SDK </a>.</p>
            </div>
          </div>
          <TokenInput onLogin={this.handleAccessTokenChange} token={this.state.accessToken} tokenType={this.state.accessTokenType} />
          <div className={styles.section}>
            <div>
              <h2>Space Widget</h2>
              <p>The Webex Teams Space widget allows developers to easily incorporate Webex Teams Space messaging and meeting into an application.</p>
              <div>
                { !this.state.spaceRunning &&
                  <SpaceDestination
                    activities={this.state.activities}
                    composerActions={this.state.composerActions}
                    destinationId={this.state.destinationId}
                    initialActivity={this.state.initialActivity}
                    mode={this.state.mode}
                    onActivitiesChange={this.handleActivitiesChange}
                    onComposerActionsChange={this.handleComposerActionsChange}
                    onDestinationChange={this.handleDestinationChange}
                    onDestinationPropTypeChange={this.handleDestinationPropTypeChange}
                    onInitialActivityChange={this.handleInitialActivityChange}
                    onModeChange={this.handleModeChange}
                  />
                }
                { this.state.spaceRunning &&
                  <ExternalControl
                    activity={this.state.setCurrentActivity}
                    onChangeActivity={this.handleChangeActivity}
                  />
                }
              </div>
              <div>
                <Button
                  ariaLabel={this.state.spaceRunning ? 'Update Space Widget' : 'Open Space Widget'}
                  color="blue"
                  disabled={!loadButtonEnabled}
                  id="openWidgetButton"
                  onClick={this.handleOpenSpaceWidget}
                >
                  {
                    this.state.spaceRunning ? 'Update Space Widget' : 'Open Space Widget'
                  }
                </Button>
                <Button
                  ariaLabel="Remove Widget"
                  color="blue"
                  disabled={!this.state.spaceRunning}
                  id="removeWidgetButton"
                  onClick={this.handleRemove}
                >
                  Remove Widget
                </Button>
              </div>
            </div>
          </div>
          <div className={styles.section}>
            <h2>Space Widget Example Code</h2>
            <div className={classNames(styles.example)}>
              <ExampleCode code={spaceCode} />
            </div>
          </div>
          <div className={styles.section}>
            <div>
              <h2>Recents Widget</h2>
              <p>
              The Webex Teams Recents widget allows developers to easily incorporate Webex Teams Recents list and events into an application.
              </p>
              <Button
                ariaLabel="Open Recents Widget"
                color="blue"
                disabled={!loadRecentsButtonEnabled}
                onClick={this.handleOpenRecentsWidget}
              >
                Open Recents Widget
              </Button>
              <Button
                ariaLabel="Remove Recents Widget"
                color="blue"
                disabled={!this.state.recentsRunning}
                id="removeRecentsWidgetButton"
                onClick={this.handleRecentsRemove}
              >
                Remove Recents Widget
              </Button>
            </div>
          </div>
          <div className={styles.section}>
            <h2>Recents Widget Example Code</h2>
            <div className={classNames(styles.example)}>
              <ExampleCode code={recentsCode} />
            </div>
          </div>
          <div className={classNames(runningDemosContainerClassNames)}>
            <div className={classNames(componentSpaceContainerClassNames)}>
              <div id={spaceWidgetElementId}>
                { this.state.spaceRunning &&
                  <SpaceWidget {...this.state.spaceWidgetProps} />
                }
              </div>
            </div>
            <div className={styles.stickyButton}>
              <Button
                ariaLabel="Remove Recents Widget"
                color="blue"
                id="toggleStickyModeButton"
                onClick={this.handleToggleStickyMode}
              >
                {this.state.stickyMode ? 'Unstick Widgets' : 'Stick Widgets'}
              </Button>
            </div>
            <div className={classNames(componentRecentsContainerClassNames)}>
              <div id={recentsWidgetElementId}>
                {
                  this.state.recentsRunning &&
                  <RecentsWidget {...this.state.recentsWidgetProps} />
                }
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }
}

DemoWidget.propTypes = {
  cookies: instanceOf(Cookies).isRequired
};

DemoWidget.title = 'Widget Demo';
DemoWidget.path = '/widget-demo';

export default withCookies(DemoWidget);
