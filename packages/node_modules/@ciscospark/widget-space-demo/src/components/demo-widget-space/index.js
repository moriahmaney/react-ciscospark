/* global ciscospark */
import React, {Component} from 'react';
import classNames from 'classnames';
import {Cookies, withCookies} from 'react-cookie';
import {instanceOf} from 'prop-types';
import {autobind} from 'core-decorators';

import {Button, Topbar, Tabs, Tab, TabContent, TabPane, TabList} from '@collab-ui/react';
import SpaceWidget from '@ciscospark/widget-space';
import TokenInput from '@webex/private-react-component-token-input';
import SpaceDestination, {constants as destinationConstants} from '@webex/private-react-component-space-destination';
import ExampleCode from '@webex/private-react-component-example-code';

import './collab.scss';
import styles from './styles.css';

const {
  MODE_ONE_ON_ONE,
  MODE_ONE_ON_ONE_ID,
  MODE_SPACE,
  MODE_SIP
} = destinationConstants;

const spaceWidgetElementId = 'my-ciscospark-widget';

class DemoWidgetSpace extends Component {
  constructor(props) {
    super(props);
    const {cookies} = this.props;
    const mode = cookies.get('destinationMode') || MODE_SPACE;
    const destinationId = cookies.get('destinationId') || '';
    const isMeetOnly = mode === MODE_SIP;
    const activities = cookies.get('activities') || {
      files: true,
      meet: true,
      message: true,
      people: true
    };
    const composerActions = cookies.get('activities') || {
      attachFiles: true
    };
    this.state = {
      activities: {
        files: isMeetOnly ? false : activities.files,
        meet: activities.meet,
        message: isMeetOnly ? false : activities.message,
        people: activities.people
      },
      accessToken: cookies.get('accessToken') || '',
      accessTokenType: cookies.get('accessTokenType') || '',
      composerActions,
      destinationId,
      initialActivity: isMeetOnly ? 'meet' : cookies.get('initialActivity') || 'message',
      mode,
      spaceRunning: false,
      spaceWidgetProps: {}
    };
  }

  shouldComponentUpdate() {
    return true;
  }

  @autobind
  handleSubmit(e) {
    e.preventDefault();
    const {cookies} = this.props;
    cookies.set('accessToken', this.state.accessToken);
    cookies.set('accessTokenType', this.state.accessTokenType);
    cookies.set('activities', this.state.activities);
    cookies.set('destinationId', this.state.destinationId);
    cookies.set('destinationMode', this.state.mode);
    cookies.set('initialActivity', this.state.initialActivity);

    this.openSpaceWidget({
      destinationId: this.state.destinationId,
      destinationType: this.state.mode
    });
  }

  @autobind
  handleRemove() {
    const widgetEl = document.getElementById(spaceWidgetElementId);
    ciscospark.widget(widgetEl).remove();
    this.setState({spaceRunning: false});
  }

  @autobind
  handleAccessTokenChange(accessToken, accessTokenType) {
    return this.setState({accessToken, accessTokenType});
  }

  @autobind
  handleDestinationChange(e) {
    return this.setState({destinationId: e.target.value});
  }

  @autobind
  handleInitialActivityChange(value) {
    return this.setState({initialActivity: value});
  }

  @autobind
  handleModeChange(value) {
    const newState = {};
    newState.activities = this.state.activities;
    if (value === 'sip') {
      newState.initialActivity = 'meet';
      newState.activities.files = false;
      newState.activities.message = false;
    }
    newState.mode = value;
    return this.setState(newState);
  }

  @autobind
  handleActivitiesChange(event) {
    const {value, checked} = event.target;
    const {activities} = this.state;
    activities[value] = checked;
    return this.setState({activities});
  }

  @autobind
  handleComposerActionsChange(event) {
    const {value, checked} = event.target;
    const {composerActions} = this.state;
    composerActions[value] = checked;
    return this.setState({composerActions});
  }

  @autobind
  openSpaceWidget({
    destinationId, destinationType
  }) {
    const widgetOptions = {
      composerActions: this.state.composerActions,
      initialActivity: this.state.initialActivity,
      onEvent: (eventName, detail) => {
        window.ciscoSparkEvents.push({eventName, detail});
      },
      spaceActivities: this.state.activities
    };
    if (this.state.accessTokenType === 'JWT') {
      widgetOptions.guestToken = this.state.accessToken;
    }
    else {
      widgetOptions.accessToken = this.state.accessToken;
    }
    widgetOptions.destinationId = destinationId;
    widgetOptions.destinationType = destinationType;

    this.setState({spaceRunning: true, spaceWidgetProps: widgetOptions});
  }

  generateExampleCode() {
    const {
      accessTokenType, activities, destinationId, mode
    } = this.state;
    const globalActivityTypesField = `activities: ${JSON.stringify(activities)}`;

    let globalToken, inlineToken;
    if (accessTokenType === 'JWT') {
      globalToken = "guestToken: 'XXXXXXXXXXXXXX'";
      inlineToken = 'data-guest-token="XXXXXXXXXXXXXX"';
    }
    else {
      globalToken = "accessToken: 'XXXXXXXXXXXXXX'";
      inlineToken = 'data-access-token="XXXXXXXXXXXXXX"';
    }

    let placeholder;
    if (this.state.mode === MODE_ONE_ON_ONE) {
      placeholder = 'TO_PERSON_EMAIL';
    }
    else if (this.state.mode === MODE_ONE_ON_ONE_ID) {
      placeholder = 'TO_PERSON_ID';
    }
    else {
      placeholder = 'SPACE_ID';
    }
    const inlineDestinationTypeField = `data-destination-type="${mode}"`;
    const inlineDestinationIdField = `data-destination-id="${destinationId || placeholder}"`;
    const globalDestinationIdField = `destinationId: '${destinationId || placeholder}'`;
    const globalDestinationTypeField = `destinationType: "${mode}"`;

    const inlineCode = `<div
  data-toggle="ciscospark-space"
  ${inlineToken}
  ${inlineDestinationIdField}
  ${inlineDestinationTypeField}
/>`;
    const globalCode = `<div id="my-ciscospark-widget" />
<script>
  var widgetEl = document.getElementById('my-ciscospark-widget');
  // Init a new widget
  ciscospark.widget(widgetEl).spaceWidget({
    ${globalToken}
    ${globalDestinationIdField},
    ${globalDestinationTypeField},
    ${globalActivityTypesField}
  });
</script>`;
    return {
      globalCode,
      inlineCode
    };
  }

  render() {
    const loadButtonEnabled = this.state.accessToken && this.state.destinationId;
    const {globalCode, inlineCode} = this.generateExampleCode(this.state);
    const componentContainerClassNames = [
      styles.widgetComponentContainer
    ];
    if (!this.state.spaceRunning) {
      componentContainerClassNames.push(styles.hidden);
    }
    // eslint-disable-reason should not apply to jsx/html markup
    /* eslint-disable max-len */
    return (
      <div>
        <Topbar title="Webex Teams Space Widget" />
        <div>
          <div className={styles.section}>
            <h1>Webex Teams Space Widget Demo</h1>
            <p>The Webex Teams Space widget allows developers to easily incorporate Webex Teams Space messaging into an application.</p>
            <p>
              This widget handles coordination between your application and the Webex Teams APIs, and provides components of the Webex Teams space experience without having to build all of the front end UI yourself.
              <br />
              Our widget is built using <a href="https://github.com/facebook/react">React</a>, <a href="https://github.com/reactjs/redux">Redux</a>, and the <a href="https://github.com/webex/spark-js-sdk">Webex Teams Javascript SDK </a>.
            </p>
          </div>
          <TokenInput onLogin={this.handleAccessTokenChange} token={this.state.accessToken} />
          <div className={styles.section}>
            <h2>Choose Widget Destination</h2>
            <SpaceDestination
              activities={this.state.activities}
              composerActions={this.state.composerActions}
              destinationId={this.state.destinationId}
              initialActivity={this.state.initialActivity}
              mode={this.state.mode}
              onActivitiesChange={this.handleActivitiesChange}
              onComposerActionsChange={this.handleComposerActionsChange}
              onDestinationChange={this.handleDestinationChange}
              onInitialActivityChange={this.handleInitialActivityChange}
              onModeChange={this.handleModeChange}
            />
            <p>
              <Button
                ariaLabel="Open Widget"
                color="blue"
                disabled={!loadButtonEnabled}
                id="openWidgetButton"
                onClick={this.handleSubmit}
              >
                Open Embedded Widget
              </Button>
              <Button
                ariaLabel="Remove Widget"
                disabled={!this.state.spaceRunning}
                id="removeWidgetButton"
                onClick={this.handleRemove}
              >
                Remove Embedded Widget
              </Button>
            </p>
          </div>
          <div className={styles.section}>
            <h2>Widget Example Code</h2>
            <div className={classNames(styles.example)}>
              <Tabs justified>
                <TabList>
                  <Tab
                    heading="Inline Mode"
                  />
                  <Tab
                    heading="Global Mode"
                  />
                </TabList>
                <TabContent>
                  <TabPane>
                    <ExampleCode code={inlineCode} />
                  </TabPane>
                  <TabPane>
                    <ExampleCode code={globalCode} />
                  </TabPane>
                </TabContent>
              </Tabs>
            </div>
          </div>
          <div className={styles.runningDemosContainer}>
            <div className={classNames(componentContainerClassNames)}>
              <div id={spaceWidgetElementId}>
                { this.state.spaceRunning &&
                  <SpaceWidget {...this.state.spaceWidgetProps} />
                }
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }
}

DemoWidgetSpace.propTypes = {
  cookies: instanceOf(Cookies).isRequired
};

DemoWidgetSpace.title = 'Widget Space';
DemoWidgetSpace.path = '/widget-space-demo';

export default withCookies(DemoWidgetSpace);
