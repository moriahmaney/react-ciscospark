import React, {Component} from 'react';
import PropTypes from 'prop-types';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import classNames from 'classnames';
import {autobind} from 'core-decorators';

import {addError, removeError} from '@ciscospark/redux-module-errors';
import {
  getFeature,
  FEATURE_GROUP_CALLING
} from '@ciscospark/redux-module-features';
import {
  checkWebRTCSupport,
  declineIncomingCall,
  dismissIncomingCall
} from '@ciscospark/redux-module-media';
import {connectToMercury} from '@ciscospark/redux-module-mercury';
import {
  fetchSpace,
  removeSpace,
  fetchSpaces,
  updateSpaceWithActivity,
  updateSpaceRead
} from '@ciscospark/redux-module-spaces';
import {storeActivities} from '@ciscospark/redux-module-activities';
import {fetchAvatar} from '@ciscospark/redux-module-avatar';
import {fetchTeams} from '@ciscospark/redux-module-teams';
import {events as metricEvents} from '@ciscospark/react-redux-spark-metrics';

import LoadingScreen from '@ciscospark/react-component-loading-screen';
import Spinner from '@ciscospark/react-component-spinner';
import ErrorDisplay from '@ciscospark/react-component-error-display';
import CallDataActivityMessage from '@ciscospark/react-component-call-data-activity';
import SpacesList from '@ciscospark/react-component-spaces-list';

import messages from './messages';
import getRecentsWidgetProps from './selector';
import {
  updateWidgetStatus,
  updateVisibilityCount
} from './actions';

import styles from './styles.css';
import {
  eventNames,
  constructMessagesEventData,
  constructRoomsEventData,
  constructMembershipEventData,
  constructCallEventData
} from './events';


const injectedPropTypes = {
  errors: PropTypes.object.isRequired,
  hasGroupCalling: PropTypes.bool,
  incomingCall: PropTypes.object,
  media: PropTypes.object.isRequired,
  mercuryStatus: PropTypes.object.isRequired,
  metrics: PropTypes.object.isRequired,
  spaces: PropTypes.object.isRequired,
  spacesList: PropTypes.array.isRequired,
  sparkInstance: PropTypes.object,
  sparkState: PropTypes.object.isRequired,
  users: PropTypes.object.isRequired,
  teams: PropTypes.object.isRequired,
  widgetRecents: PropTypes.object.isRequired,
  widgetStatus: PropTypes.object.isRequired,
  addError: PropTypes.func.isRequired,
  checkWebRTCSupport: PropTypes.func.isRequired,
  connectToMercury: PropTypes.func.isRequired,
  declineIncomingCall: PropTypes.func.isRequired,
  dismissIncomingCall: PropTypes.func.isRequired,
  fetchAvatar: PropTypes.func.isRequired,
  fetchSpace: PropTypes.func.isRequired,
  fetchSpaces: PropTypes.func.isRequired,
  fetchTeams: PropTypes.func.isRequired,
  getFeature: PropTypes.func.isRequired,
  removeError: PropTypes.func.isRequired,
  removeSpace: PropTypes.func.isRequired,
  updateSpaceRead: PropTypes.func.isRequired,
  updateSpaceWithActivity: PropTypes.func.isRequired,
  updateVisibilityCount: PropTypes.func.isRequired,
  updateWidgetStatus: PropTypes.func.isRequired
};

export const ownPropTypes = {
  muteNotifications: PropTypes.bool
};

export class RecentsWidget extends Component {
  @autobind
  static setup(props) {
    const {
      errors,
      spark,
      sparkInstance,
      sparkState,
      mercuryStatus,
      metrics,
      widgetStatus
    } = props;

    // Check for spark device errors (auth)
    const registerErrorId = 'spark.register';
    if (
      sparkState.registerError
      && (!errors.get('hasError') || !errors.get('errors').has(registerErrorId))
    ) {
      const {formatMessage} = props.intl;
      const error = spark.get('error');
      const displayTitle = formatMessage(messages.unableToLoad);
      let displaySubtitle = formatMessage(messages.unknownError);
      if (error.statusCode === 401) {
        displaySubtitle = formatMessage(messages.errorBadToken);
      }
      props.addError({
        id: registerErrorId,
        displayTitle,
        displaySubtitle,
        temporary: false,
        code: error.statusCode
      });
    }

    else if (sparkInstance && sparkState.authenticated && sparkState.registered) {
      RecentsWidget.getFeatureFlags(props);

      // Setup Web Sockets
      if (!mercuryStatus.hasConnected
        && !mercuryStatus.connecting
        && !mercuryStatus.connected
        && sparkInstance.internal.device.registered) {
        props.connectToMercury(sparkInstance);
      }

      if (mercuryStatus.connected) {
        // Grab spaces
        if (!widgetStatus.isFetchingRecentSpaces
          && !widgetStatus.hasFetchedRecentSpaces) {
          props.updateWidgetStatus({isFetchingRecentSpaces: true});
          props.fetchSpaces(sparkInstance, {
            limit: 15,
            deferDecrypt: true
          })
            .then(() => {
              props.updateWidgetStatus({hasFetchedRecentSpaces: true});
            });
          props.fetchSpaces(sparkInstance, {
            limit: 1000
          })
            .then(() => {
              props.updateWidgetStatus({isFetchingRecentSpaces: false});
            });
        }

        // Grab teams
        if (sparkInstance.internal.team
          && !widgetStatus.isFetchingTeams
          && !widgetStatus.hasFetchedTeams) {
          props.updateWidgetStatus({isFetchingTeams: true});
          props.fetchTeams(sparkInstance)
            .then(() => {
              props.updateWidgetStatus({
                isFetchingTeams: false,
                hasFetchedTeams: true
              });
            });
        }
      }
    }
    if (widgetStatus.hasFetchedRecentSpaces) {
      metrics.sendEndMetric(metricEvents.WIDGET_LOAD);
    }
  }

  @autobind
  static getFeatureFlags(props) {
    const {
      widgetStatus
    } = props;
    if (widgetStatus.hasFetchedFeatureFlags || widgetStatus.isFetchingFeatureFlags) {
      return;
    }
    props.getFeature('developer', FEATURE_GROUP_CALLING, props.sparkInstance);
    props.updateWidgetStatus({hasFetchedFeatureFlags: true, isFetchingFeatureFlags: false});
  }

  static checkForMercuryErrors(props) {
    const {
      errors,
      intl,
      mercuryStatus
    } = props;
    // Add Mercury disconnect error
    const mercuryError = 'mercury.disconnect';
    const isMercuryConnected = mercuryStatus.connected;
    const isMercuryDisconnected = !isMercuryConnected && mercuryStatus.hasConnected;
    const hasError = errors.get('hasError');
    const hasMercuryError = errors.get('errors').has(mercuryError);
    const hasNoMercuryError = !hasError || !hasMercuryError;
    if (isMercuryDisconnected && hasNoMercuryError) {
      // Create UI Error
      const {formatMessage} = intl;
      props.addError({
        id: mercuryError,
        displayTitle: formatMessage(messages.errorConnection),
        displaySubtitle: formatMessage(messages.reconnecting),
        temporary: true
      });
    }
    if (isMercuryConnected && hasMercuryError) {
      props.removeError(mercuryError);
    }
  }

  componentWillReceiveProps(nextProps) {
    RecentsWidget.checkForMercuryErrors(nextProps);
    RecentsWidget.setup(nextProps);
    this.addListeners(nextProps);
    this.fetchAllAvatars(nextProps);
  }

  shouldComponentUpdate(nextProps) {
    return nextProps.spacesList !== this.props.spacesList
      || nextProps.errors !== this.props.errors
      || nextProps.widgetRecents !== this.props.widgetRecents
      || nextProps.incomingCall !== this.props.incomingCall;
  }

  @autobind
  getSpaceFromCall(call) {
    return this.props.spaces.get(call.instance.locus.conversationUrl.split('/').pop());
  }

  @autobind
  fetchAllAvatars(nextProps) {
    const {
      currentUser,
      spaces,
      spacesList,
      sparkInstance,
      widgetStatus
    } = nextProps;

    if (currentUser
      && widgetStatus.hasFetchedRecentSpaces
      && this.props.spacesList
    ) {
      spacesList.forEach((s) => {
        if (!s.isDecrypting) {
          if (
            s.type === 'direct'
            && s.toPersonId
          ) {
            nextProps.fetchAvatar({userId: s.toPersonId}, sparkInstance);
          }
          else if (
            s.type === 'group' &&
            spaces.has(s.id)
          ) {
            nextProps.fetchAvatar({space: spaces.get(s.id)}, sparkInstance);
          }
        }
      });
    }
  }

  @autobind
  addListeners(nextProps) {
    const {
      currentUser,
      sparkInstance,
      widgetStatus,
      incomingCall
    } = nextProps;

    if (currentUser
      && widgetStatus.hasFetchedRecentSpaces
      && !widgetStatus.isListeningForNewActivity
    ) {
      this.listenForNewActivity(sparkInstance, nextProps);
    }
    if (incomingCall && !this.props.incomingCall) {
      const space = this.getSpaceFromCall(incomingCall);
      if (space) {
        this.handleEvent(eventNames.CALLS_CREATED, constructCallEventData(incomingCall.instance, space));
      }
    }
  }

  @autobind
  handleNewActivity(activity) {
    const {
      props,
      processActivity
    } = this;
    const {
      sparkInstance,
      spaces
    } = props;

    let spaceId = activity.target && activity.target.id;

    // On delete, refetch space to get previous activity
    if (spaceId && ['delete', 'tombstone'].includes(activity.verb)) {
      props.fetchSpace(sparkInstance, spaceId);
    }

    // Handle spaceId if this is a completely new space or hiding a space
    if (!spaceId && ['create', 'hide'].includes(activity.verb)) {
      spaceId = activity.object.id;
    }

    const space = spaces.get(spaceId);

    if (space) {
      processActivity(activity, space);
    }
    else {
      // go retrieve the space if it doesn't exist
      props.fetchSpace(sparkInstance, spaceId)
        .then((newSpace) => {
          if (newSpace) {
            processActivity(activity, newSpace);
          }
        });
    }
  }

  @autobind
  processActivity(activity, space) {
    const {props, handleEvent} = this;
    const {
      currentUser
    } = props;
    props.storeActivities([activity]);
    const isSelf = activity.actor.id === currentUser.id;
    switch (activity.verb) {
      case 'share':
      case 'post': {
        const currentUserEmail = currentUser.email;
        const otherUser = space.participants
          .find((p) => p.emailAddress !== currentUserEmail);

        // Update space with newest post activity
        props.updateSpaceWithActivity(activity, isSelf, true);

        // Do not emit unread if current user created the message
        if (!isSelf) {
          handleEvent(eventNames.SPACES_UNREAD, constructRoomsEventData(space, activity));
        }
        // Emit message:created event
        handleEvent(eventNames.MESSAGES_CREATED, constructMessagesEventData(activity, otherUser));
        break;
      }
      case 'lock':
      case 'unlock': {
        props.updateSpaceWithActivity(activity, isSelf);
        break;
      }
      case 'acknowledge': {
        if (isSelf) {
        // update space with last acknowledgment if it's this user
          props.updateSpaceRead(activity.target.id, activity.published);
          handleEvent(eventNames.SPACES_READ, constructRoomsEventData(space, activity));
        }
        break;
      }
      case 'create': {
        const constructedActivity = Object.assign({}, activity, {
          target: activity.object,
          object: {
            id: currentUser.id,
            emailAddress: currentUser.email
          }
        });
        handleEvent(eventNames.MEMBERSHIPS_CREATED, constructMembershipEventData(constructedActivity));
        break;
      }
      case 'add': {
        handleEvent(eventNames.MEMBERSHIPS_CREATED, constructMembershipEventData(activity));
        break;
      }
      case 'leave': {
        props.removeSpace(space.id);
        handleEvent(eventNames.MEMBERSHIPS_DELETED, constructMembershipEventData(activity));
        break;
      }
      case 'hide': {
        props.removeSpace(space.id);
        break;
      }
      default:
    }
  }

  /**
   * Setup listeners for new activities
   *
   * @param {Object} sparkInstance
   * @param {Object} props
   * @returns {Promise}
   */
  listenForNewActivity(sparkInstance, props) {
    props.updateWidgetStatus({isListeningForNewActivity: true});
    return sparkInstance.internal.mercury.on('event:conversation.activity',
      (event) => this.handleNewActivity(event.data.activity));
  }

  /**
   * Setup listeners for call activities
   *
   * @param {Object} sparkInstance
   * @param {Object} props
   * @returns {Promise}
   */
  listenForCall(sparkInstance, props) {
    props.updateWidgetStatus({isListeningForCalls: true});
    return sparkInstance.phone.on('call:incoming', (call) => this.handleCall(call));
  }

  @autobind
  handleCall(call) {
    const {
      props,
      handleEvent
    } = this;
    const {
      hasGroupCalling,
      spaces
    } = props;

    const space = spaces.get(call.locus.conversationUrl.split('/').pop());
    // Only provide event if the call is direct
    if (hasGroupCalling || space.type === 'direct') {
      call.acknowledge()
        .then(() => {
          const removeIncoming = () => call.hangup().then(props.deleteIncomingCall);

          // If call signals inactive we fire hangup and clean up
          call.once('inactive', removeIncoming);

          // If call signals connected we clean up
          const checkForConnected = () => {
            if (call.me.state === 'connected') {
              call.off('membership:change', checkForConnected);
              call.off('inactive', removeIncoming);
              props.deleteIncomingCall();
            }
          };
          call.on('membership:change', checkForConnected);

          props.storeIncomingCall(call);
          handleEvent(eventNames.CALLS_CREATED, constructCallEventData(call, space));
        });
    }
  }

  @autobind
  handleSpaceClick(spaceId) {
    const space = this.props.spaces.get(spaceId);
    this.handleEvent(eventNames.SPACES_SELECTED, constructRoomsEventData(space));
  }

  @autobind
  handleSpaceCallClick(spaceId) {
    const space = this.props.spaces.get(spaceId);
    const roomData = constructRoomsEventData(space);
    this.handleEvent(eventNames.SPACES_SELECTED, {
      action: eventNames.ACTION_CALL,
      ...roomData
    });
  }


  /**
   * Event handler in case one isn't provided
   * @param {string} name
   * @param {object} data
   * @returns {undefined}
   */
  @autobind
  handleEvent(name, data) {
    const {
      onEvent,
      sparkInstance
    } = this.props;
    const logData = Object.assign({}, data);
    // Omit call objet from logger to prevent call range error
    if (data.call) {
      logData.call = '--- OMITTED ---';
    }
    sparkInstance.logger.info(`event handler - ${name} - ${data.action}`, logData);
    if (typeof onEvent === 'function') {
      this.props.onEvent(name, data);
    }
  }

  /**
   * Generates the activity text for a space based off the latest activity
   * @param {Object} space
   * @returns {String|Object}
   */
  @autobind
  constructActivityText(space) {
    const {props} = this;
    const {currentUser} = props;
    const {formatMessage} = props.intl;

    // Get Activity Text for space
    let activityText;

    const {isDecrypting, latestActivity} = space;

    if (!isDecrypting) {
      const {actorName: actorName = '', type: activityType = 'unknown'} = latestActivity;

      switch (activityType) {
        case 'post': {
          activityText = <span>{actorName}<span className={styles.midDot} />{latestActivity.object.displayName}</span>;
          break;
        }
        case 'update': {
          if (latestActivity.object.objectType === 'locusSessionSummary') {
            activityText = (
              <CallDataActivityMessage
                actor={latestActivity.actor}
                currentUser={currentUser}
                duration={latestActivity.object.duration}
                isGroupCall={latestActivity.object.isGroupCall}
                participants={latestActivity.object.participants.items}
              />
            );
          }
          break;
        }
        case 'share': {
          activityText = formatMessage(messages.sharedFile);
          break;
        }
        case 'add': {
          activityText = formatMessage(messages.addedToSpace, {actorName, targetName: latestActivity.text.split(' ')[0]});
          break;
        }
        default: {
          activityText = '';
        }
      }
    }

    return activityText;
  }

  render() {
    const {props} = this;
    const {
      errors,
      hasGroupCalling,
      media,
      spacesList,
      currentUser,
      widgetStatus
    } = props;
    const {formatMessage} = props.intl;
    const isFetchingSpaces = widgetStatus.isFetchingRecentSpaces;
    const hasFetchedSpaces = widgetStatus.hasFetchedRecentSpaces;

    const showLoader = isFetchingSpaces;

    let displaySubtitle, displayTitle, temporary, widgetError;
    if (errors.get('hasError')) {
      widgetError = errors.get('errors').first();
      ({
        displayTitle,
        displaySubtitle,
        temporary
      } = widgetError);
    }

    const isWebRTCSupported = media.getIn(['webRTC', 'isSupported']);

    if (spacesList && hasFetchedSpaces) {
      const spacesListWithActivityText = spacesList.map((space) => {
        const s = Object.assign({}, space);
        s.activityText = this.constructActivityText(space);
        return s;
      });

      const handleCallClick = isWebRTCSupported ? this.handleSpaceCallClick : undefined;
      return (
        <div className={classNames('ciscospark-recents-widget', styles.recentsWidget)}>
          {
            errors.get('hasError') &&
            <div className={classNames('ciscospark-error-wrapper', styles.errorWrapper)}>
              <ErrorDisplay
                secondaryTitle={displaySubtitle}
                title={displayTitle}
                transparent={temporary}
              />
            </div>
          }
          <div className={classNames('ciscospark-spaces-list-wrapper', styles.spacesListWrapper)}>
            <SpacesList
              currentUser={currentUser}
              formatMessage={formatMessage}
              hasCalling={hasGroupCalling}
              onCallClick={handleCallClick}
              onClick={this.handleSpaceClick}
              spaces={spacesListWithActivityText}
            />
            {
              showLoader &&
              <div className={styles.spinner}>
                <Spinner bright />
              </div>
            }
          </div>
        </div>
      );
    }
    if (errors.get('hasError')) {
      return (
        <div className={classNames('ciscospark-recents-widget', styles.recentsWidget)}>
          <ErrorDisplay
            secondaryTitle={displaySubtitle}
            title={displayTitle}
            transparent={temporary}
          />
        </div>
      );
    }

    return (
      <div className={classNames('ciscospark-recents-widget', styles.recentsWidget)}>
        <LoadingScreen loadingMessage={formatMessage(messages.loadingMessage)} />
      </div>
    );
  }
}


RecentsWidget.propTypes = {
  ...injectedPropTypes,
  ...ownPropTypes
};

export default connect(
  getRecentsWidgetProps,
  (dispatch) => bindActionCreators({
    addError,
    checkWebRTCSupport,
    connectToMercury,
    declineIncomingCall,
    dismissIncomingCall,
    fetchAvatar,
    fetchSpace,
    fetchSpaces,
    fetchTeams,
    getFeature,
    removeError,
    removeSpace,
    updateSpaceRead,
    updateSpaceWithActivity,
    storeActivities,
    updateVisibilityCount,
    updateWidgetStatus
  }, dispatch)
)(RecentsWidget);
